substitutions:
  name: ifan04-bedroom
  device_description: Sonoff iFan04
  friendly_name: Bedroom Ceiling Fan

globals:
  - id: target_fan_speed
    type: int
  - id: start_time_offset
    type: int

external_components:
  - source: ../components
    components: [ifan04]
    # - source: github://jhollowe/esphome_components
    #   components: [ifan04]

esp8266:
  board: esp01_1m

esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}
  on_boot:
    priority: 225
    # turn off the light as early as possible
    then:
      - light.turn_off: fan_light
  on_loop:
    lambda: |-
      if (id(start_time_offset) && (millis() > id(start_time_offset))) {
        ESP_LOGD("IFAN04", "Setting target speed: %d", id(target_fan_speed));
        auto call = id(the_fan).turn_on();
        call.set_speed(id(target_fan_speed));
        call.perform();
        id(start_time_offset) = 0;
      }

# Disable logging on serial as it is used by the RF remote
logger:
  baud_rate: 0

api:
  encryption:
    key: "ps8x3urIdHKJ83Ls2JlIHkLdITJnWqSiOfLnTqBWD74="

ota:
  - platform: esphome
    password: "91f3a25017022969968c7c7b2fe7721e"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:

mdns:
  disabled: false

captive_portal:

web_server:
  port: 80
  version: 3

uart:
  tx_pin: GPIO01
  rx_pin: GPIO03
  baud_rate: 9600
  # debug:
  #   direction: RX
  #   dummy_receiver: false
  #   sequence:
  #     - lambda: UARTDebug::log_hex(direction, bytes, ',');

ifan04:
  on_fan:
    - lambda: |-
        if (speed) {
          auto call = id(the_fan).turn_on();
          call.set_speed(speed);
          call.perform();
          if (id(buzzer_dummy).state) {
            switch(id(target_fan_speed)) {
              case 3:
                id(buzzer_pin).turn_on();
                delay(50);
                id(buzzer_pin).turn_off();
                delay(50);
              case 2:
                id(buzzer_pin).turn_on();
                delay(50);
                id(buzzer_pin).turn_off();
                delay(50);
              case 1:
                id(buzzer_pin).turn_on();
                delay(50);
                id(buzzer_pin).turn_off();
            }
          }
        } else {
          id(target_fan_speed) = 0;
          id(start_time_offset) = 0;
          auto call = id(the_fan).turn_off();
          call.perform();
        }
  on_light:
    - light.toggle: fan_light
  on_buzzer:
    - switch.toggle: buzzer_dummy

sensor:
  - platform: wifi_signal
    id: wifisignal
    name: ${friendly_name} WiFi Signal
    update_interval: 5min

binary_sensor:
  - platform: gpio
    id: button
    pin: GPIO0
    on_press:
      then:
        - light.toggle: fan_light

interval:
  - interval: 500ms
    then:
      - if:
          condition:
            not:
              wifi.connected:
          then:
            - light.turn_on:
                id: led1
                brightness: 100%
                transition_length: 0s
            - delay: 250ms
            - light.turn_off:
                id: led1
                transition_length: 250ms

output:
  - platform: template
    id: fanoutput
    type: float
    write_action:
      - lambda: |-
          if (state) {
            int speed = int(state / 0.33);
            if (!id(target_fan_speed) && (speed < 3)) {
              ESP_LOGD("IFAN04", "Fan currently off, boosting speed");
              id(target_fan_speed) = speed;
              state = 1.0;
              // 5 second full power to get fan to speed
              id(start_time_offset) = millis() + 5000;
            } else {
              id(start_time_offset) = 0;
              id(target_fan_speed) = speed;
            }
          }
          if (state < 0.3) {
            // OFF
            id(target_fan_speed) = 0;
            id(start_time_offset) = 0;
            id(fan_relay1).turn_off();
            id(fan_relay2).turn_off();
            id(fan_relay3).turn_off();
          } else if (state < 0.6) {
            // low speed
            id(fan_relay1).turn_on();
            id(fan_relay2).turn_off();
            id(fan_relay3).turn_off();
          } else if (state < 0.9) {
            // medium speed
            id(fan_relay1).turn_off();
            id(fan_relay2).turn_on();
            id(fan_relay3).turn_off();
          } else {
            // high speed
            id(fan_relay1).turn_off();
            id(fan_relay2).turn_off();
            id(fan_relay3).turn_on();
          }

  - platform: gpio
    id: light_relay
    pin: GPIO9
    inverted: true

  - platform: gpio
    id: buzzer_pin
    pin: GPIO10
    inverted: true

  - platform: esp8266_pwm
    id: led_pin
    pin: GPIO13
    inverted: true

light:
  - platform: binary
    id: fan_light
    name: "Light"
    output: light_relay

  - platform: monochromatic
    id: led1
    output: led_pin
    default_transition_length: 0s
    restore_mode: always off

switch:
  - platform: restart
    id: reboot_button
    name: "${friendly_name} Reboot"

  - platform: template
    id: buzzer_dummy
    name: "Enable Buzzer"
    optimistic: true

  - platform: gpio
    id: fan_relay1
    pin: GPIO14

  - platform: gpio
    id: fan_relay2
    pin: GPIO12

  - platform: gpio
    id: fan_relay3
    pin: GPIO15

  - platform: template
    id: buzzer
    name: "Buzzer"
    optimistic: true
    turn_on_action:
      - if:
          condition:
            - switch.is_on: buzzer_dummy
          then:
            - output.turn_on: buzzer_pin
          else:
            - delay: 50ms
            - switch.turn_off: buzzer
    turn_off_action:
      - output.turn_off: buzzer_pin

fan:
  - platform: speed
    id: the_fan
    name: "Fan"
    output: fanoutput
    speed_count: 3
